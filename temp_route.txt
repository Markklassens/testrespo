@app.put("/api/admin/tools/{tool_id}/content", response_model=ToolResponse)
async def update_tool_content(
    tool_id: str,
    content_update: ToolUpdate,
    current_user: User = Depends(require_admin),
    db: Session = Depends(get_db)
):
    """Update tool content (Admin only - must have access to tool)"""
    from auth import check_tool_access
    
    # Check if admin has access to this tool
    if not check_tool_access(current_user, tool_id, db):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="You don't have access to this tool. Please request access from a superadmin."
        )
    
    db_tool = db.query(Tool).filter(Tool.id == tool_id).first()
    if not db_tool:
        raise HTTPException(status_code=404, detail="Tool not found")
    
    # Only allow specific fields to be updated by regular admins
    allowed_fields = [
        'description', 'short_description', 'features', 'pricing_details',
        'meta_title', 'meta_description', 'ai_meta_title', 'ai_meta_description', 'ai_content'
    ]
    
    update_data = content_update.dict(exclude_unset=True)
    
    # If regular admin, restrict fields
    if current_user.user_type == "admin":
        update_data = {k: v for k, v in update_data.items() if k in allowed_fields}
    
    for field, value in update_data.items():
        setattr(db_tool, field, value)
    
    db.commit()
    db.refresh(db_tool)
    return db_tool